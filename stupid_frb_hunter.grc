options:
  parameters:
    author: ''
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: no_gui
    hier_block_src_path: '.:'
    id: stupid_frb_hunter
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: run
    sizing_mode: fixed
    thread_safe_setters: ''
    title: ''
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [0, 4]
    rotation: 0
    state: enabled

blocks:
- name: Analysis_Poller
  id: variable_function_probe
  parameters:
    block_id: Stupid_FRB
    comment: ''
    function_args: ''
    function_name: doAnalysis
    poll_rate: '3'
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1112, 772.0]
    rotation: 0
    state: enabled
- name: f_lower
  id: variable
  parameters:
    comment: ''
    value: (skyf-srate/2.0)/1.0e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [432, 700]
    rotation: 0
    state: enabled
- name: f_upper
  id: variable
  parameters:
    comment: ''
    value: (skyf+srate/2.0)/1.0e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [544, 700]
    rotation: 0
    state: enabled
- name: fbrate
  id: variable
  parameters:
    comment: ''
    value: '2000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [816, 180.0]
    rotation: 0
    state: enabled
- name: fbsize
  id: variable
  parameters:
    comment: ''
    value: '16'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [728, 180.0]
    rotation: 0
    state: enabled
- name: ichans
  id: variable
  parameters:
    comment: ''
    value: eval(chans)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [768, 700]
    rotation: 0
    state: enabled
- name: mhz
  id: variable
  parameters:
    comment: ''
    value: str("%d" % (skyf/ 1000000))
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [712, 980.0]
    rotation: 0
    state: enabled
- name: minsmear
  id: variable
  parameters:
    comment: ''
    value: dm/2.41e-4 * (1.0/(f_lower*f_lower)-1.0/(f_upper*f_upper))
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [648, 700]
    rotation: 0
    state: enabled
- name: outfile
  id: variable
  parameters:
    comment: ''
    value: prefix+"frb-"+mhz
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [712, 908]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: int(srate)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [0, 132]
    rotation: 0
    state: enabled
- name: skyf
  id: variable
  parameters:
    comment: ''
    value: freq if sky <= 0 else sky
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [336, 700]
    rotation: 0
    state: enabled
- name: Stupid_FRB
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport time\nimport json\nimport math\nimport queue\n\
      import copy\nimport os\nimport random\nimport ephem\n\nclass blk(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"A FRB first-order detector block\"\"\"\n\n    def __init__(self, fbsize=16,filename='/dev/null',fbrate=2500,chans=[1,7,14],\n\
      \        thresh=5.0,minsmear=2.5e-3,declination=0.0,fake=False,longitude=76.03):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Stupid FRB Hunter',   # will show up in GRC\n \
      \           in_sig=[np.float32],\n            out_sig=None\n        )\n    \
      \    # if an attribute with the same name as a parameter is found,\n       \
      \ # a callback is registered (properties work, too).\n        \n        #\n\
      \        # We create a \"work queue\" of preliminary events\n        #  The\
      \ dequeue worker does further analysis before\n        #  logging the event.\n\
      \        self.aQueue = queue.Queue(maxsize=16)\n        self.filename = filename\n\
      \        \n        #\n        # we (somewhat arbitrarily) inspect a two-second\
      \ window of\n        #  channel data looking for pulses\n        #\n       \
      \ self.two_seconds = int(fbrate*1.5)\n        self.channels=[]\n        self.chans\
      \ = chans\n        self.lchans = len(chans)\n        self.declination = declination\n\
      \        self.scnt = 0\n        self.fbsize = fbsize\n        self.fbrate =\
      \ fbrate\n        self.fake = fake\n        self.longitude = longitude\n   \
      \     #\n        # The minimum time distance for detected\n        #  pulses\
      \ between the lowest and highest frequency\n        #\n        self.mindistance\
      \ = minsmear * float(fbrate)\n        self.mindistance = int(self.mindistance)\n\
      \        for x in range(fbsize):\n            self.channels.append([0.0]*self.two_seconds)\n\
      \            \n        self.thresh = thresh\n        self.flen = fbsize\n  \
      \  #\n    # Given longitude(decimal degrees as a float)\n    #\n    # Return\
      \ the current sidereal time as a string with\n    #  \",\" separated tokens\n\
      \    #\n    def cur_sidereal(self,longitude):\n        longstr = \"%02d\" %\
      \ int(longitude)\n        longstr = longstr + \":\"\n        longitude = abs(longitude)\n\
      \        frac = longitude - int(longitude)\n        frac *= 60\n        mins\
      \ = int(frac)\n        longstr += \"%02d\" % mins\n        longstr += \":00\"\
      \n        x = ephem.Observer()\n        x.date = ephem.now()\n        x.long\
      \ = longstr\n        jdate = ephem.julian_date(x)\n        tokens=str(x.sidereal_time()).split(\"\
      :\")\n        hours=int(tokens[0])\n        minutes=int(tokens[1])\n       \
      \ seconds=int(float(tokens[2]))\n        sidt = \"%02d,%02d,%02d\" % (hours,\
      \ minutes, seconds)\n        return (sidt)\n    #\n    # Log an event\n    #\n\
      \    # We basically log the entire two-second channel buffer\n    #\n    def\
      \ logthispuppy(self,chans,evt):\n        q = self.thresh\n        ltp = time.gmtime(evt)\n\
      \        frac = evt-float(int(evt))\n        declination = -99.00\n        if\
      \ (isinstance(self.declination, str) == True):\n            if (os.path.isfile(self.declination)):\n\
      \                f = open(self.declination, \"r\")\n                dstr=f.readline()\n\
      \                f.close()\n                declination = float(dstr)\n    \
      \        else:\n                try:\n                    declination = float(self.declination)\n\
      \                except:\n                    declination = -99.00\n       \
      \ else:\n            declination = float(self.declination)\n        sidt = self.cur_sidereal(self.longitude)\n\
      \        sids = sidt.split(\",\")\n        sidh = float(sids[0])\n        sidh\
      \ += float(sids[1])/60.0\n        sidh += float(sids[2])/3600.0\n        fn\
      \ = self.filename+\"-\"\n        fn = fn + \"%.1f-%04d%02d%02d-%02d%02d%05.3f-%.2f\"\
      \ % (declination, ltp.tm_year, ltp.tm_mon,\n            ltp.tm_mday, ltp.tm_hour,\
      \ ltp.tm_min, float(ltp.tm_sec)+frac, sidh)\n        fp = open (fn+\".dat\"\
      , \"w\")\n        for c in range(len(chans)):\n            fp.write (str(chans[c])+\"\
      \\n\")\n        fp.close()\n    \n    #\n    # This is now largely a no-op except\
      \ for logging.\n    #\n    def doAnalysis(self):\n        if (self.aQueue.empty()):\n\
      \            return None\n        else:\n            item = self.aQueue.get()\n\
      \            self.logthispuppy(item[\"data\"],item[\"time\"])\n            \
      \    \n    def work(self, input_items, output_items):\n        \"\"\"Do dedispersion/folding\"\
      \"\"\n        q = input_items[0]\n        l = len(q)\n        bndx = 0\n   \
      \     for i in range(int(l/self.flen)):\n            #\n            # For each\
      \ channel\n            #\n            for c in range(self.flen):\n         \
      \       #\n                # Add one sample to current channel\n           \
      \     #\n                self.channels[c][self.scnt] = q[bndx]\n           \
      \     bndx += 1\n            #\n            # Once there are \"enough\" samples\
      \ in the channels, do analysis\n            #\n            self.scnt += 1\n\
      \            \n            #\n            # Each channel now has \"two_seconds\"\
      \ (actually 1.5 right now) worth of samples in it\n            #\n         \
      \   if (self.scnt >= self.two_seconds):\n                # Analysis\n      \
      \          amused = 0\n                amusingplaces = []\n                \n\
      \                #\n                # For each of the \"test\" (amusing) channels\n\
      \                #\n                # Test for a spike that is \"big\" compared\
      \ to mean\n                #  in each of the \"test\" channels.  We use\n  \
      \              #  standard deviation and the \"thresh\" parameter\n        \
      \        #  to determine if spike is big enough\n                #\n       \
      \         for amusing in self.chans:\n                    #\n              \
      \      # Channel average\n                    #\n                    cavg =\
      \ np.mean(self.channels[amusing])\n                    \n                  \
      \  #\n                    # Channel STD\n                    #\n           \
      \         cstd = np.std(self.channels[amusing])\n                    \n    \
      \                #\n                    # Find MAX in this channel\n       \
      \             #\n                    mx = np.max(self.channels[amusing])\n \
      \                   \n                    #\n                    # How many\
      \ sigma is max?\n                    #\n                    if ((mx-cavg) >\
      \ cstd*self.thresh):\n                        amused += 1\n                \
      \        #\n                        # Record location in the channel data\n\
      \                        #\n                        amusingplaces.append(np.argmax(self.channels[amusing]))\n\
      \                    else:\n                        break\n                \n\
      \                #\n                # Only if we were amused in all amusing\
      \ places\n                #\n                # On init we're giving a list of\
      \ channels to inspect\n                #  (or \"be amused by\").\n         \
      \       #\n                # If we are amused (spike exceeds threshold) in all\
      \ those channels\n                #   do further analysis\n                #\n\
      \                if (amused >= self.lchans):\n                    #\n      \
      \              # Spike on lower-frequency channel must occur *after*\n     \
      \               #  higher-frequency channel. Difference in positions\n     \
      \               #  must be \"significant\".\n                    #\n       \
      \             # Because FRBs are dispersed, just like pulsars, the low-frequency\
      \ channel\n                    #  should be *later* than the higher-frequency\
      \ channels.  We simply\n                    #  use \"sorted()\" to enforce this\
      \ rough ordering constraint.\n                    #\n                    if\
      \ (amusingplaces == sorted(amusingplaces,reverse=True)):\n                 \
      \       lx = len(amusingplaces)-1\n                        #\n             \
      \           # Now, the distance (in samples) between the lowest frequency spike\n\
      \                        #  and the highest must be > the minimum smear time\
      \ implied by the\n                        #  DM given on input to the program\
      \ (and passed to use on init).\n                        #\n                \
      \        if ((amusingplaces[0] - amusingplaces[lx]) >= self.mindistance):\n\
      \                            #\n                            # Place this on\
      \ a deeper-analysis queue\n                            #\n                 \
      \           d = {}\n                            d[\"data\"] = copy.deepcopy(self.channels)\n\
      \                            t = time.time()\n                            #\n\
      \                            # Adjust timestamp for pulse location within\n\
      \                            #  the 2-second window.  This is only very\n  \
      \                          #  approximate.  But potentially allows better\n\
      \                            #  coordination to other observatories.\n     \
      \                       #\n                            if (len(amusingplaces)\
      \ > 0):\n                                t -= (amusingplaces[0]*(1.0/self.fbrate))\n\
      \                            d[\"time\"] = t\n                            self.aQueue.put(d)\n\
      \                self.scnt = 0\n\n        return len(q)\n"
    affinity: ''
    alias: ''
    chans: ichans
    comment: 'Hunt for FRBs

      Look for strong pulses in a select subset of

      FFT bins.  Confirm roughly-correct

      timing of those pulses. We use a two-second

      window to evaluate pulse events.'
    declination: decln
    fake: True if fake > 0 else False
    fbrate: fbrate
    fbsize: fbsize
    filename: outfile
    longitude: longitude
    maxoutbuf: '0'
    minoutbuf: '0'
    minsmear: minsmear
    thresh: threshold
  states:
    _io_cache: ('Stupid FRB Hunter', 'blk', [('fbsize', '16'), ('filename', "'/dev/null'"),
      ('fbrate', '2500'), ('chans', '[1, 7, 14]'), ('thresh', '5.0'), ('minsmear',
      '0.0025'), ('declination', '0.0'), ('fake', 'False'), ('longitude', '76.03')],
      [('0', 'float', 1)], [], 'A FRB first-order detector block', ['chans', 'declination',
      'fake', 'fbrate', 'fbsize', 'filename', 'longitude', 'thresh'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1032, 452.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_mag_squared_0
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: fbsize
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 492.0]
    rotation: 0
    state: enabled
- name: blocks_integrate_xx_0
  id: blocks_integrate_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: int(samp_rate/fbsize/fbrate)
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: fbsize
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [528, 492]
    rotation: 0
    state: enabled
- name: blocks_keep_m_in_n_0
  id: blocks_keep_m_in_n
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    m: 4*fbsize
    maxoutbuf: '0'
    minoutbuf: '0'
    n: 5*fbsize
    offset: '0'
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [512, 244.0]
    rotation: 0
    state: enabled
- name: blocks_stream_to_vector_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: fbsize
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [752, 284]
    rotation: 0
    state: enabled
- name: blocks_vector_to_stream_0
  id: blocks_vector_to_stream
  parameters:
    affinity: ''
    alias: ''
    comment: 'Convert to stream

      Hunter will convert back

      to vector internally'
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: fbsize
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [736, 524]
    rotation: 0
    state: enabled
- name: chans
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Channels to inspect
    short_id: ''
    type: str
    value: '"[2,13]"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [544, 880]
    rotation: 0
    state: enabled
- name: decln
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Declination
    short_id: ''
    type: str
    value: '"-99.0"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [832, 896]
    rotation: 0
    state: enabled
- name: device
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Device String
    short_id: ''
    type: str
    value: '"rtl=0"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [216, 792]
    rotation: 0
    state: enabled
- name: dm
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Minimum Dispersion Measure
    short_id: ''
    type: eng_float
    value: '200'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [696, 792]
    rotation: 0
    state: enabled
- name: fake
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Fake pulses tester
    short_id: ''
    type: intx
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [944, 780.0]
    rotation: 0
    state: enabled
- name: fft_vxx_0
  id: fft_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: FFT filterbank
    fft_size: fbsize
    forward: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '1'
    shift: 'True'
    type: complex
    window: window.blackmanharris(fbsize)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1008, 252.0]
    rotation: 0
    state: enabled
- name: freq
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Frequency
    short_id: ''
    type: eng_float
    value: 611e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [568, 792]
    rotation: 0
    state: enabled
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import numpy as np
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [240, 44]
    rotation: 0
    state: enabled
- name: longitude
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Geographic longitude
    short_id: ''
    type: eng_float
    value: '-76.03'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [216, 900.0]
    rotation: 0
    state: enabled
- name: osmosdr_source_0
  id: osmosdr_source
  parameters:
    affinity: ''
    alias: ''
    ant0: ''
    ant1: ''
    ant10: ''
    ant11: ''
    ant12: ''
    ant13: ''
    ant14: ''
    ant15: ''
    ant16: ''
    ant17: ''
    ant18: ''
    ant19: ''
    ant2: ''
    ant20: ''
    ant21: ''
    ant22: ''
    ant23: ''
    ant24: ''
    ant25: ''
    ant26: ''
    ant27: ''
    ant28: ''
    ant29: ''
    ant3: ''
    ant30: ''
    ant31: ''
    ant4: ''
    ant5: ''
    ant6: ''
    ant7: ''
    ant8: ''
    ant9: ''
    args: device
    bb_gain0: '20'
    bb_gain1: '20'
    bb_gain10: '20'
    bb_gain11: '20'
    bb_gain12: '20'
    bb_gain13: '20'
    bb_gain14: '20'
    bb_gain15: '20'
    bb_gain16: '20'
    bb_gain17: '20'
    bb_gain18: '20'
    bb_gain19: '20'
    bb_gain2: '20'
    bb_gain20: '20'
    bb_gain21: '20'
    bb_gain22: '20'
    bb_gain23: '20'
    bb_gain24: '20'
    bb_gain25: '20'
    bb_gain26: '20'
    bb_gain27: '20'
    bb_gain28: '20'
    bb_gain29: '20'
    bb_gain3: '20'
    bb_gain30: '20'
    bb_gain31: '20'
    bb_gain4: '20'
    bb_gain5: '20'
    bb_gain6: '20'
    bb_gain7: '20'
    bb_gain8: '20'
    bb_gain9: '20'
    bw0: samp_rate*0.8
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    corr0: '0'
    corr1: '0'
    corr10: '0'
    corr11: '0'
    corr12: '0'
    corr13: '0'
    corr14: '0'
    corr15: '0'
    corr16: '0'
    corr17: '0'
    corr18: '0'
    corr19: '0'
    corr2: '0'
    corr20: '0'
    corr21: '0'
    corr22: '0'
    corr23: '0'
    corr24: '0'
    corr25: '0'
    corr26: '0'
    corr27: '0'
    corr28: '0'
    corr29: '0'
    corr3: '0'
    corr30: '0'
    corr31: '0'
    corr4: '0'
    corr5: '0'
    corr6: '0'
    corr7: '0'
    corr8: '0'
    corr9: '0'
    dc_offset_mode0: '2'
    dc_offset_mode1: '0'
    dc_offset_mode10: '0'
    dc_offset_mode11: '0'
    dc_offset_mode12: '0'
    dc_offset_mode13: '0'
    dc_offset_mode14: '0'
    dc_offset_mode15: '0'
    dc_offset_mode16: '0'
    dc_offset_mode17: '0'
    dc_offset_mode18: '0'
    dc_offset_mode19: '0'
    dc_offset_mode2: '0'
    dc_offset_mode20: '0'
    dc_offset_mode21: '0'
    dc_offset_mode22: '0'
    dc_offset_mode23: '0'
    dc_offset_mode24: '0'
    dc_offset_mode25: '0'
    dc_offset_mode26: '0'
    dc_offset_mode27: '0'
    dc_offset_mode28: '0'
    dc_offset_mode29: '0'
    dc_offset_mode3: '0'
    dc_offset_mode30: '0'
    dc_offset_mode31: '0'
    dc_offset_mode4: '0'
    dc_offset_mode5: '0'
    dc_offset_mode6: '0'
    dc_offset_mode7: '0'
    dc_offset_mode8: '0'
    dc_offset_mode9: '0'
    freq0: freq
    freq1: 100e6
    freq10: 100e6
    freq11: 100e6
    freq12: 100e6
    freq13: 100e6
    freq14: 100e6
    freq15: 100e6
    freq16: 100e6
    freq17: 100e6
    freq18: 100e6
    freq19: 100e6
    freq2: 100e6
    freq20: 100e6
    freq21: 100e6
    freq22: 100e6
    freq23: 100e6
    freq24: 100e6
    freq25: 100e6
    freq26: 100e6
    freq27: 100e6
    freq28: 100e6
    freq29: 100e6
    freq3: 100e6
    freq30: 100e6
    freq31: 100e6
    freq4: 100e6
    freq5: 100e6
    freq6: 100e6
    freq7: 100e6
    freq8: 100e6
    freq9: 100e6
    gain0: rfgain
    gain1: '10'
    gain10: '10'
    gain11: '10'
    gain12: '10'
    gain13: '10'
    gain14: '10'
    gain15: '10'
    gain16: '10'
    gain17: '10'
    gain18: '10'
    gain19: '10'
    gain2: '10'
    gain20: '10'
    gain21: '10'
    gain22: '10'
    gain23: '10'
    gain24: '10'
    gain25: '10'
    gain26: '10'
    gain27: '10'
    gain28: '10'
    gain29: '10'
    gain3: '10'
    gain30: '10'
    gain31: '10'
    gain4: '10'
    gain5: '10'
    gain6: '10'
    gain7: '10'
    gain8: '10'
    gain9: '10'
    gain_mode0: 'True'
    gain_mode1: 'False'
    gain_mode10: 'False'
    gain_mode11: 'False'
    gain_mode12: 'False'
    gain_mode13: 'False'
    gain_mode14: 'False'
    gain_mode15: 'False'
    gain_mode16: 'False'
    gain_mode17: 'False'
    gain_mode18: 'False'
    gain_mode19: 'False'
    gain_mode2: 'False'
    gain_mode20: 'False'
    gain_mode21: 'False'
    gain_mode22: 'False'
    gain_mode23: 'False'
    gain_mode24: 'False'
    gain_mode25: 'False'
    gain_mode26: 'False'
    gain_mode27: 'False'
    gain_mode28: 'False'
    gain_mode29: 'False'
    gain_mode3: 'False'
    gain_mode30: 'False'
    gain_mode31: 'False'
    gain_mode4: 'False'
    gain_mode5: 'False'
    gain_mode6: 'False'
    gain_mode7: 'False'
    gain_mode8: 'False'
    gain_mode9: 'False'
    if_gain0: '20'
    if_gain1: '20'
    if_gain10: '20'
    if_gain11: '20'
    if_gain12: '20'
    if_gain13: '20'
    if_gain14: '20'
    if_gain15: '20'
    if_gain16: '20'
    if_gain17: '20'
    if_gain18: '20'
    if_gain19: '20'
    if_gain2: '20'
    if_gain20: '20'
    if_gain21: '20'
    if_gain22: '20'
    if_gain23: '20'
    if_gain24: '20'
    if_gain25: '20'
    if_gain26: '20'
    if_gain27: '20'
    if_gain28: '20'
    if_gain29: '20'
    if_gain3: '20'
    if_gain30: '20'
    if_gain31: '20'
    if_gain4: '20'
    if_gain5: '20'
    if_gain6: '20'
    if_gain7: '20'
    if_gain8: '20'
    if_gain9: '20'
    iq_balance_mode0: '0'
    iq_balance_mode1: '0'
    iq_balance_mode10: '0'
    iq_balance_mode11: '0'
    iq_balance_mode12: '0'
    iq_balance_mode13: '0'
    iq_balance_mode14: '0'
    iq_balance_mode15: '0'
    iq_balance_mode16: '0'
    iq_balance_mode17: '0'
    iq_balance_mode18: '0'
    iq_balance_mode19: '0'
    iq_balance_mode2: '0'
    iq_balance_mode20: '0'
    iq_balance_mode21: '0'
    iq_balance_mode22: '0'
    iq_balance_mode23: '0'
    iq_balance_mode24: '0'
    iq_balance_mode25: '0'
    iq_balance_mode26: '0'
    iq_balance_mode27: '0'
    iq_balance_mode28: '0'
    iq_balance_mode29: '0'
    iq_balance_mode3: '0'
    iq_balance_mode30: '0'
    iq_balance_mode31: '0'
    iq_balance_mode4: '0'
    iq_balance_mode5: '0'
    iq_balance_mode6: '0'
    iq_balance_mode7: '0'
    iq_balance_mode8: '0'
    iq_balance_mode9: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    sample_rate: samp_rate
    sync: sync
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [168, 156.0]
    rotation: 0
    state: enabled
- name: prefix
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: File prefix
    short_id: ''
    type: ''
    value: '"./"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [224, 696]
    rotation: 0
    state: enabled
- name: rfgain
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: RF Gain
    short_id: ''
    type: eng_float
    value: '50'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [472, 792]
    rotation: 0
    state: enabled
- name: sky
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Sky Frequency if different from tuned freq
    short_id: ''
    type: eng_float
    value: '0.0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [968, 896]
    rotation: 0
    state: enabled
- name: srate
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Sample Rate
    short_id: ''
    type: eng_float
    value: 2.56e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [352, 792]
    rotation: 0
    state: enabled
- name: threshold
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Trigger Threshold
    short_id: ''
    type: eng_float
    value: '2.75'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [400, 880]
    rotation: 0
    state: enabled
- name: virtual_sink_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: channels
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1288, 268.0]
    rotation: 0
    state: true
- name: virtual_source_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: channels
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [80, 492.0]
    rotation: 0
    state: true

connections:
- [blocks_complex_to_mag_squared_0, '0', blocks_integrate_xx_0, '0']
- [blocks_integrate_xx_0, '0', blocks_vector_to_stream_0, '0']
- [blocks_keep_m_in_n_0, '0', blocks_stream_to_vector_0, '0']
- [blocks_stream_to_vector_0, '0', fft_vxx_0, '0']
- [blocks_vector_to_stream_0, '0', Stupid_FRB, '0']
- [fft_vxx_0, '0', virtual_sink_0, '0']
- [osmosdr_source_0, '0', blocks_keep_m_in_n_0, '0']
- [virtual_source_0, '0', blocks_complex_to_mag_squared_0, '0']

metadata:
  file_format: 1
